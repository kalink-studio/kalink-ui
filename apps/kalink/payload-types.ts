/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    services: Service;
    serviceDescriptions: ServiceDescription;
    people: Person;
    testimonials: Testimonial;
    courseSessions: CourseSession;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    serviceDescriptions: ServiceDescriptionsSelect<false> | ServiceDescriptionsSelect<true>;
    people: PeopleSelect<false> | PeopleSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    courseSessions: CourseSessionsSelect<false> | CourseSessionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    mainNavigation: MainNavigation;
  };
  globalsSelect: {
    mainNavigation: MainNavigationSelect<false> | MainNavigationSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * Generated from the title. Keep it unique to avoid routing conflicts.
   */
  slug: string;
  slugManualOverride?: boolean | null;
  navigationLabel?: string | null;
  tint?: ('primary' | 'secondary') | null;
  /**
   * Toggle for the single homepage entry.
   */
  isHomepage?: boolean | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaImage?: (number | null) | Media;
  };
  blocks?:
    | (
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            body: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            backgroundTint?: ('primary' | 'primaryContainer' | 'secondaryContainer') | null;
            /**
             * Optional set of links to media assets (PDFs, videos, etc.)
             */
            ctas?:
              | {
                  label: string;
                  media: number | Media;
                  variant?: ('filled' | 'outlined' | 'bare' | 'ghost') | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'introBlock';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            items?:
              | {
                  showInSubNavigation?: boolean | null;
                  subNavigationLabel?: string | null;
                  /**
                   * Optional custom anchor slug. When empty the slug will be derived from the label or title.
                   */
                  anchorSlug?: string | null;
                  title: string;
                  body: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  image: number | Media;
                  direction?: ('start' | 'end') | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'mediaBanner';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            body: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            backgroundTint?: ('primary' | 'primaryContainer' | 'secondaryContainer') | null;
            image: number | Media;
            direction?: ('start' | 'end') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'fiftyFifty';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            backgroundTint?: ('primary' | 'primaryContainer' | 'secondaryContainer') | null;
            items?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'listItems';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            items?:
              | {
                  entry:
                    | {
                        relationTo: 'services';
                        value: number | Service;
                      }
                    | {
                        relationTo: 'serviceDescriptions';
                        value: number | ServiceDescription;
                      };
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'servicesGrid';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            items?:
              | {
                  showInSubNavigation?: boolean | null;
                  subNavigationLabel?: string | null;
                  /**
                   * Optional custom anchor slug. When empty the slug will be derived from the label or title.
                   */
                  anchorSlug?: string | null;
                  person: number | Person;
                  direction?: ('start' | 'end') | null;
                  backgroundTint?: ('primaryContainer' | 'secondaryContainer') | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'team';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            items?:
              | {
                  testimonial: number | Testimonial;
                  tintScheme?: ('secondaryContainer' | 'primaryContainer') | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'testimonialsRow';
          }
        | {
            showInSubNavigation?: boolean | null;
            subNavigationLabel?: string | null;
            /**
             * Optional custom anchor slug. When empty the slug will be derived from the label or title.
             */
            anchorSlug?: string | null;
            title: string;
            subtitle?: string | null;
            backgroundTint?: ('primary' | 'primaryContainer' | 'secondaryContainer') | null;
            information?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            formType?: ('message' | 'inscription') | null;
            formFields?:
              | {
                  fieldType: 'textField' | 'select' | 'textarea';
                  fieldName: string;
                  fieldLabel: string;
                  required?: boolean | null;
                  /**
                   * Select a session list to populate the dropdown options.
                   */
                  optionsSource?: (number | null) | CourseSession;
                  id?: string | null;
                }[]
              | null;
            showMap?: boolean | null;
            /**
             * @minItems 2
             * @maxItems 2
             */
            location?: [number, number] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contacts';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: number;
  title: string;
  slug: string;
  backgroundTint?: ('secondaryContainer' | 'primaryContainer') | null;
  picture: number | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serviceDescriptions".
 */
export interface ServiceDescription {
  id: number;
  title: string;
  slug: string;
  description: string;
  backgroundTint?: ('primaryContainer' | 'secondaryContainer') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "people".
 */
export interface Person {
  id: number;
  slug: string;
  givenName: string;
  surname: string;
  jobTitle?: string | null;
  summary?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  picture?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: number;
  slug: string;
  givenName: string;
  text: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courseSessions".
 */
export interface CourseSession {
  id: number;
  slug: string;
  title: string;
  items?:
    | {
        label: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'services';
        value: number | Service;
      } | null)
    | ({
        relationTo: 'serviceDescriptions';
        value: number | ServiceDescription;
      } | null)
    | ({
        relationTo: 'people';
        value: number | Person;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: number | Testimonial;
      } | null)
    | ({
        relationTo: 'courseSessions';
        value: number | CourseSession;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugManualOverride?: T;
  navigationLabel?: T;
  tint?: T;
  isHomepage?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaImage?: T;
      };
  blocks?:
    | T
    | {
        introBlock?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              body?: T;
              backgroundTint?: T;
              ctas?:
                | T
                | {
                    label?: T;
                    media?: T;
                    variant?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        mediaBanner?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              items?:
                | T
                | {
                    showInSubNavigation?: T;
                    subNavigationLabel?: T;
                    anchorSlug?: T;
                    title?: T;
                    body?: T;
                    image?: T;
                    direction?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        fiftyFifty?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              body?: T;
              backgroundTint?: T;
              image?: T;
              direction?: T;
              id?: T;
              blockName?: T;
            };
        listItems?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              backgroundTint?: T;
              items?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        servicesGrid?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              items?:
                | T
                | {
                    entry?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        team?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              items?:
                | T
                | {
                    showInSubNavigation?: T;
                    subNavigationLabel?: T;
                    anchorSlug?: T;
                    person?: T;
                    direction?: T;
                    backgroundTint?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        testimonialsRow?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              items?:
                | T
                | {
                    testimonial?: T;
                    tintScheme?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        contacts?:
          | T
          | {
              showInSubNavigation?: T;
              subNavigationLabel?: T;
              anchorSlug?: T;
              title?: T;
              subtitle?: T;
              backgroundTint?: T;
              information?: T;
              formType?: T;
              formFields?:
                | T
                | {
                    fieldType?: T;
                    fieldName?: T;
                    fieldLabel?: T;
                    required?: T;
                    optionsSource?: T;
                    id?: T;
                  };
              showMap?: T;
              location?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  backgroundTint?: T;
  picture?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serviceDescriptions_select".
 */
export interface ServiceDescriptionsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  backgroundTint?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "people_select".
 */
export interface PeopleSelect<T extends boolean = true> {
  slug?: T;
  givenName?: T;
  surname?: T;
  jobTitle?: T;
  summary?: T;
  picture?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  slug?: T;
  givenName?: T;
  text?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courseSessions_select".
 */
export interface CourseSessionsSelect<T extends boolean = true> {
  slug?: T;
  title?: T;
  items?:
    | T
    | {
        label?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mainNavigation".
 */
export interface MainNavigation {
  id: number;
  /**
   * Ordered list of pages to expose in the primary navigation.
   */
  items?:
    | {
        page: number | Page;
        labelOverride?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mainNavigation_select".
 */
export interface MainNavigationSelect<T extends boolean = true> {
  items?:
    | T
    | {
        page?: T;
        labelOverride?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}